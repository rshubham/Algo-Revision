PaypalPrep

https://leetcode.com/discuss/interview-question/1611065/Paypal-or-Technical-Interview-or-Reject
https://leetcode.com/discuss/interview-question/1528662/determine-the-number-of-pairs(ij)such-that-AiAj-and-i*j-is-divisible-by-X
https://leetcode.com/discuss/interview-question/1294014/PayPal-India-OA
https://leetcode.com/discuss/interview-question/1143315/Paypal-or-MTS-or-April-2021

https://leetcode.com/discuss/interview-question/1205635/PayPal-or-Java-Software-Engineer-(Back-end)-or-2021
https://leetcode.com/discuss/interview-question/1104385/Paypal-or-Online-Coding-or-SE2-or-2-YOE
https://leetcode.com/discuss/interview-question/984260/Paypal-or-Fleetx-or-Rupeek-or-Online-Assesment
https://leetcode.com/discuss/interview-question/680327/PayPal-or-Phone-or-Find-Celebrity-and-Move-Zeroes
https://leetcode.com/discuss/interview-question/124753/Question-%40-Paypal%3A-Can-Mario-complete-the-Level

---
Machine Coding:
https://leetcode.com/discuss/interview-question/1701772/Flipkart-or-Machine-Coding-SDE1or-Gym-Managment-System

-----------------------------------------------

Q1 - Find if a number is palindrome. Not allowed to use any string operations.

"12321"

boolean isPalindrome(String x){
    if(x == null || x.isEmpty()) return true;
    int i = 0, j = x.length()-1;
    while(i < j){
        if(x.charAt(i) == x.charAt(j)){
            i++; j--;
        } else {
            return false;
        }
    }
    return true;
}

------------------------------------------------

	      2
	  /      \
	3         1
  /    \     / \
  4    1    2   5

Expected output - 234 + 231 + 212 + 215 = 892

int globalSum = 0;

int findSumOfEdges(TreeNode root){
    findSumOfEdgesUtil(root,new StringBuilder());
    return globalSum;
}


void findSumOfEdgesUtil(TreeNode root, StringBuilder sb){
    if(root == null) return;
    if(root.left == null && root.right == null) {
        b.append(""+root.val);
        globalSum += Integer.parseInt(sb.toString());
        sb.deleteCharAt(sb.length()-1);
        return;
    }
    sb.append(""+root.val);
    findSumOfEdgesUtil(root.left, sb);
    findSumOfEdgesUtil(root.right, sb);
    sb.deleteCharAt(sb.length()-1);
}


----------------------------------------------------------

Find Pairs with below conditions:

    i<j
    A[i]=A[j]
    i*j is divisible by X
    
    1 < X < n*(n-1) 

    Sample input:
    A: [ 2,3,4,3,3,2,3,3]
    X: 2

    Sample output:
    10

    eg:
    (1,6)
    (2,4)
    (2,5)
    (2,7)
    (2,8)
    (4,5)
    (4,7)
    (4,8)
    (5,8)
    (7,8)

    O(n*n)


   0    1    2    3    4    5    6    7
   2,   3,   4,   3,   3,   2,   3,   3


   (i*j)%X == 0

   2 -> 0,5
   3 -> 1,3,4,6,7
   4 -> 2

   --------------------

1,3,4,6,7

---------------


1,2,3

001
010
011
----
311
----

000
011
011
---

-------------------------------


Given input array.
Arr = [4, 8, 5,3,1]

Output all pair of elements satisfying below condition.
(4,1) (8,2) (8,3) (8,1) (5,1) (3,1)

Condition:
(i,j) -> i and j are array indexes, i < j
Arr[i] > 2*Arr[j]

-- merge sort method - O(nlogn)

-----------------------------------------


Remove nth duplicate element from the given linked list.
Eg: 1 -> 2 -> 3 -> 1 -> 2 -> 3 ->1 ->2 ->3, n=2
Here the nth(2nd) duplicate element in this list is 2. 
So return, 1 -> 3 -> 1 -> 3 -> 1 -> 3


ListNode removeNthDuplicate(ListNode head, int n){
        Map<Integer, Integer> hm = new LinkedHashMap<>();
        ListNode<Integer> curr = head;
        while(curr != null){
            hm.put(curr.value, hm.getOrDefault(curr.value,0)+1);
            curr = curr.next;
        }
        int x = 0;
        Integer node = null;
        for(Map.Entry<Integer,Integer> m : hm.entrySet()){
            x++;
            if(x == n) {
                node =  m.getKey();
                break;
            }
        }
        return remove(head, node);
    }
    h
                      c
             p
                               n
    1   ->   2   ->   1   ->   2   ->   3   ->   1   ->   2   ->   3
                      
                      3
                      x

ListNode remove(ListNode head, Integer node){
        if(node == null) return head;
        if(node == head.value){
            head = head.next;
            return head;
        }
        ListNode curr = head, next = curr.next, prev = null;
        while(curr != null){
            if(curr.value == node){
                if(prev != null) prev.next = next;
                if(curr != null) curr.next = null;
                curr = next;
                if(next != null) next = next.next;
            }
            curr = curr.next;
            prev = (prev == null) ? head : prev.next;
            next = (next == null) ? next : next.next;
        }
        return head;
}

----------------------------------------------------------


Input : arr[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}    
        x = 5
Output : First Occurrence = 2
         Last Occurrence = 5

arr = 1, 3, 5, 5, 5, 5, 67, 123, 125

s
            
                                                    e
            m'          m
0     1     2     3     4     5      6      7       8
1,    3,    5,    5,    5,    5,    67,    123,    125
f = m;
while(f-1 > 0 && a[f-1] == a[f]){
    f--;
}
l = m;
while(l+1 < N && a[l+1] == a[l]){
    l++;
}

      m
0     1     2     3     4     5     6     7     8
5     5     5     5     5     5     5     5     5



void findFirstLastOccurrence(int[] a, int k){
        if(a == null || a.length == 0) return;
        findUtil(a,k,0,a.length-1);
        System.out.println("First Occurence: "+ f + " Last Occurence: "+ l);
        l = -1;
        f = -1;
        found = false;
    }

    int l = -1, f = -1;
    boolean found = false;

    void findUtil(int[] a, int k, int s, int e){
        if(found || s >= e) return;
        int m = s + (e - s)/2;
        if(a[m] == k){
            if(f < 0){
                if(m-1 >= 0 && a[m-1] == a[m]){
                    findUtil(a,k,s,m);
                } else if((m-1 > 0 && a[m-1] < a[m]) || m-1 < 0){
                    f = m;
                    found = (l > 0 && f > 0);
                    return;
                }
            }
            if(l < 0){
                if(m+1 < a.length && a[m] == a[m+1]) {
                    findUtil(a, k, m+1, e);
                } else if(m+1 < a.length && a[m+1] > a[m]){
                    l = m;
                    found = (l > 0 && f > 0);
                    return;
                }
            }
        }


        if(a[m] > k) findUtil(a,k,s,m-1);
        else if(a[m] < k) findUtil(a,k,m+1,e);
    }